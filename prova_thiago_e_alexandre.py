# -*- coding: utf-8 -*-
"""Prova Thiago e Alexandre.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KAJq1ammMt3QS37LOxQQDoJUcV6uiNpz

Hackathon Relâmpago - Caçadores de Fraudes
Autores: Thiago Nogueira de Sousa Martins Almeida / Alexandre Monteiro Rodrigues Coelho
Data: 06/04/2025
Objetivo: Detectar fraudes em lista de compras públicas utilizando Python.
"""

# Extraindo, Transformando e Carregando Dados
import pandas as pd
df_Compras = pd.read_csv('public_servant_purchases_new.csv')
df_Compras.head()

df_Compras.columns

df_Compras.info()

df_Compras.describe()

"""**1. Detectar compras duplicadas**"""

def Compras_Duplicadas(Compras):
    Compras_duplicadas = int(Compras.duplicated().sum())
    if Compras_duplicadas > 0:
        print(f'A quantidade de compras duplicadas é: {Compras_duplicadas}')
    else:
        print('Não há compras duplicadas')
Compras_Duplicadas(df_Compras)

"""**2. Listar valores acima do limite (R$1000)**"""

def verificar_valores_suspeitos(compras):
    valores_suspeitos = compras[compras['valor_em_real'] > 1000]
    quantidade_suspeitos = len(valores_suspeitos)
    print(f'Quantidade de compras suspeitas (acima de R$1000): {quantidade_suspeitos}')
    print('\nValores das compras suspeitas:')
    print(valores_suspeitos[['valor_em_real']])
    return valores_suspeitos
verificar_valores_suspeitos(df_Compras)

"""3. Identificar compras fora do horário comercial (antes de 08:00 ou depois de 18:00)


"""

def compras_fora_de_horario(compras):
  compras['data_da_compra'] = pd.to_datetime(compras['data_da_compra'])
  início_do_expediente = pd.to_datetime('08:00:00').time()
  fim_do_expediente = pd.to_datetime('18:00:00').time()
  # compras['data_da_compra'] = compras['data_da_compra'].dt.time
  compras_fora_horario = compras[(compras['data_da_compra'].dt.time < início_do_expediente) | (compras['data_da_compra'].dt.time > fim_do_expediente)]
  quantidade_fora_horario = len(compras_fora_horario)
  print(f'Quantidade de compras fora do horário comercial: {quantidade_fora_horario}')
  print('\nCompras fora do horário comercial:')
  print(compras_fora_horario[['data_da_compra']])
  return compras_fora_horario
compras_fora_de_horario(df_Compras)

"""4. Organizar as compras por servidor usando dicionários"""

def compras_por_servidor(compras):
    # Garante que a coluna de data esteja no formato datetime
    compras['data_da_compra'] = pd.to_datetime(compras['data_da_compra'])

    # Cria um dicionário vazio para armazenar as compras por servidor
    compras_por_servidor = {}

    # Itera sobre o DataFrame linha por linha
    for _, linha in compras.iterrows():
        servidor = linha['nome_do_funcionario']
        dados_compra = linha.to_dict()  # Transforma a linha em dicionário

        # Adiciona a compra na lista do servidor, criando a chave se necessário
        if servidor not in compras_por_servidor:
            compras_por_servidor[servidor] = []

        compras_por_servidor[servidor].append(dados_compra)

    # Exibe informações resumidas
    print(f'Quantidade de servidores com compras registradas: {len(compras_por_servidor)}\n')
    for servidor, compras_lista in compras_por_servidor.items():
        print(f'{servidor}: {len(compras_lista)} compras')

    return compras_por_servidor
compras_por_servidor(df_Compras)

"""5. Exibir relatório com severidade da infração"""

def classificar_infracao(Compras):
    # 1. Converter a coluna 'data_da_compra' para datetime
    Compras['data_da_compra'] = pd.to_datetime(df_Compras['data_da_compra'])

    # 2. Definir horários de expediente
    inicio_expediente = pd.to_datetime('08:00:00').time()
    fim_expediente = pd.to_datetime('18:00:00').time()

    # 3. Criar a coluna 'infracao' e inicializar como 'Sem Infração'
    Compras['infracao'] = 'Em Conformidade'

    # 4. Aplicar as regras de classificação
    # Infração Leve
    Compras.loc[
        (Compras['data_da_compra'].dt.time < inicio_expediente) |
        (Compras['data_da_compra'].dt.time > fim_expediente),
        'infracao'
    ] = 'Leve'

    # Infração Média
    Compras.loc[Compras['valor_em_real'] > 1000, 'infracao'] = 'Média'

    # Infração Grave
    Compras.loc[
        ((Compras['data_da_compra'].dt.time < inicio_expediente) |
         (Compras['data_da_compra'].dt.time > fim_expediente)) &
        (Compras['valor_em_real'] > 1000),
        'infracao'
    ] = 'Grave'

    # Infração Gravíssima
    df_Compras.loc[
        ((Compras['data_da_compra'].dt.time < inicio_expediente) |
         (Compras['data_da_compra'].dt.time > fim_expediente)) &
        (Compras['valor_em_real'] > 10000),
        'infracao'
    ] = 'Gravíssima'
    print(Compras[['data_da_compra', 'valor_em_real', 'infracao']])
classificar_infracao(df_Compras)